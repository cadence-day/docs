name: Main Release

on:
  pull_request:
    branches: [main]
    types: [opened, synchronize, reopened, closed]
  workflow_dispatch:

jobs:
  build-on-pr:
    if: github.event.action == 'opened'
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 20
      - run: npm install -g eas-cli jq
      - run: eas login --token ${{ secrets.EXPO_TOKEN }}

      - name: Bump version and build number
        run: |
          node scripts/bump_version.js --mode=main --prTitle="${{ github.event.pull_request.title }}"
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add app.json
          git commit -m "ci: bump version/build"
          git push

      - name: EAS Build iOS
        run: eas build --platform ios --profile prd --non-interactive --wait

      - name: Get App Version & Build Number
        id: get_version
        run: |
          version=$(jq -r '.expo.version' app.json)
          build=$(jq -r '.expo.ios.buildNumber' app.json)
          echo "version=$version" >> $GITHUB_OUTPUT
          echo "build=$build" >> $GITHUB_OUTPUT

      - name: Get latest build ID
        id: build
        run: |
          build_id=$(eas build:list --platform=ios --status=finished --limit=1 --json --non-interactive | jq -r '.[0].id')
          echo "build_id=$build_id" >> $GITHUB_OUTPUT

      - name: Comment on PR with build info
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          message: |
            âœ… Build completed
            **Version:** ${{ steps.get_version.outputs.version }}
            **Build:** ${{ steps.get_version.outputs.build }}
            **Build ID:** ${{ steps.build.outputs.build_id }}

  submit-on-merge:
    if: github.event.action == 'closed' && github.event.pull_request.merged == true
    runs-on: macos-latest
    env:
      DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 20
      - run: npm install -g eas-cli jq
      - run: eas login --token ${{ secrets.EXPO_TOKEN }}

      - name: Get latest build ID
        id: build
        run: |
          build_id=$(eas build:list --platform=ios --status=finished --limit=1 --json --non-interactive | jq -r '.[0].id')
          echo "build_id=$build_id" >> $GITHUB_OUTPUT

      - name: Submit to App Store
        run: eas submit -p ios --id ${{ steps.build.outputs.build_id }} --non-interactive

      - name: Get App Version & Build Number
        id: get_version
        run: |
          version=$(jq -r '.expo.version' app.json)
          build=$(jq -r '.expo.ios.buildNumber' app.json)
          echo "version=$version" >> $GITHUB_OUTPUT
          echo "build=$build" >> $GITHUB_OUTPUT

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ steps.get_version.outputs.version }}
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create Issue to Track AppStore Acceptance
        uses: peter-evans/create-issue-from-file@v5
        with:
          title: "AppStore acceptance for version ${{ steps.get_version.outputs.version }}"
          content-filepath: .github/ISSUE_TEMPLATES/appstore_acceptance.md

      - name: Comment on PR with submission info
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          message: |
            ðŸš€ Build submitted to App Store
            **Version:** ${{ steps.get_version.outputs.version }}
            **Build:** ${{ steps.get_version.outputs.build }}
            **Build ID:** ${{ steps.build.outputs.build_id }}

      - name: Notify Discord
        run: |
          pr_title="${{ github.event.pull_request.title }}"
          pr_body="${{ github.event.pull_request.body }}"
          version="${{ steps.get_version.outputs.version }}"
          build="${{ steps.get_version.outputs.build }}"
          build_id="${{ steps.build.outputs.build_id }}"

          payload=$(jq -n \
            --arg title "$pr_title" \
            --arg body "$pr_body" \
            --arg ver "$version" \
            --arg bld "$build" \
            --arg bid "$build_id" \
            '{
              username: "CI/CD Bot",
              embeds: [
                {
                  title: "ðŸš€ New Production Build Submitted",
                  description: $body,
                  fields: [
                    {name: "Version", value: $ver, inline: true},
                    {name: "Build", value: $bld, inline: true},
                    {name: "Build ID", value: $bid, inline: false}
                  ],
                  color: 16744192
                }
              ]
            }')

          curl -H "Content-Type: application/json" \
            -X POST -d "$payload" $DISCORD_WEBHOOK
