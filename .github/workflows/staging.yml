name: Staging Build & Submit

on:
  pull_request:
    branches: [staging]
    types: [opened, synchronize, reopened, closed]

jobs:
  build-only:
    if: github.event.action != 'closed'
    runs-on: macos-latest
    env:
      APP_STORE_CONNECT_KEY: ${{ secrets.APP_STORE_CONNECT_KEY }}
      APP_STORE_CONNECT_KEY_ID: ${{ secrets.APP_STORE_CONNECT_KEY_ID }}
      APP_STORE_CONNECT_KEY_ISSUER_ID: ${{ secrets.APP_STORE_CONNECT_KEY_ISSUER_ID }}
      APP_STORE_CONNECT_APP_ID: ${{ secrets.APP_STORE_CONNECT_APP_ID }}
    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          ref: dev
          fetch-depth: 0
      - uses: actions/setup-node@v4
        with:
          node-version: 22.x
          cache: npm

      - name: üîê Install Doppler CLI
        uses: dopplerhq/cli-action@v3

      - name: Bump build number
        run: |
          node scripts/bump_version.js --mode=staging --prTitle="${{ github.event.pull_request.title }}"
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add app.json
          git commit -m "ci: bump build number (staging)"
          git push origin HEAD

      - name: üèó Setup EAS
        uses: expo/expo-github-action@v8
        with:
          eas-version: latest
          token: ${{ secrets.EXPO_TOKEN }}

      - name: üì¶ Install dependencies
        run: npm install

      - name: EAS Update (stg)
        run: |
          doppler run --project cadence-app --config stg --token ${{ secrets.DOPPLER_TOKEN_STG }} --command "eas update --branch stg --message 'Automated update from PR #${{ github.event.pull_request.number }}'"

      - name: EAS Build iOS (no submit)
        run: doppler run --project cadence-app --config stg --token ${{ secrets.DOPPLER_TOKEN_STG }} --command "eas build -p ios --profile stg --non-interactive"

  submit-on-merge:
    if: github.event.action == 'closed' && github.event.pull_request.merged == true
    runs-on: macos-latest
    env:
      APP_STORE_CONNECT_KEY: ${{ secrets.APP_STORE_CONNECT_KEY }}
      APP_STORE_CONNECT_KEY_ID: ${{ secrets.APP_STORE_CONNECT_KEY_ID }}
      APP_STORE_CONNECT_KEY_ISSUER_ID: ${{ secrets.APP_STORE_CONNECT_KEY_ISSUER_ID }}
      APP_STORE_CONNECT_APP_ID: ${{ secrets.APP_STORE_CONNECT_APP_ID }}
      APPLE_DEVELOPER_EMAIL: ${{ secrets.APPLE_DEVELOPER_EMAIL }}
      TESTFLIGHT_ALPHA_GROUP_ID: ${{ secrets.TESTFLIGHT_ALPHA_GROUP_ID }}
      DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          ref: staging
          fetch-depth: 0
      - uses: actions/setup-node@v4
        with:
          node-version: 22.x
          cache: npm

      - name: üîê Install Doppler CLI
        uses: dopplerhq/cli-action@v3

      - name: Bump build number
        run: |
          node scripts/bump_version.js --mode=staging --prTitle="${{ github.event.pull_request.title }}"
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add app.json
          git commit -m "ci: bump build number (staging merged)"
          git push origin staging

      - name: üèó Setup EAS
        uses: expo/expo-github-action@v8
        with:
          eas-version: latest
          token: ${{ secrets.EXPO_TOKEN }}

      - name: üì¶ Install dependencies
        run: npm install

      - name: üîë Setup App Store Connect API Key
        run: |
          echo "${{ secrets.APP_STORE_CONNECT_KEY }}" > ./asc-api-key.p8

      - name: EAS Build & Submit iOS
        id: build_submit
        run: |
          # Run the build and capture output, but also display it in real-time
          echo "Starting EAS build and submit..."
          set +e  # Don't exit on error so we can capture the output
          doppler run --project cadence-app --config stg --token ${{ secrets.DOPPLER_TOKEN_STG }} --command "eas build -p ios --profile prd --non-interactive --auto-submit" 2>&1 | tee build_output.txt
          exit_code=${PIPESTATUS[0]}
          set -e  # Re-enable exit on error

          echo "========================"
          echo "EAS command exit code: $exit_code"
          echo "========================"

          # If the build failed, show the error and exit
          if [ $exit_code -ne 0 ]; then
            echo "EAS build failed with exit code $exit_code"
            echo "Last 20 lines of output:"
            tail -20 build_output.txt
            rm -f build_output.txt
            exit $exit_code
          fi

          # Extract App Store Connect URL
          app_store_url=$(grep -o "https://appstoreconnect.apple.com/apps/[0-9]*/[a-zA-Z]*" build_output.txt || echo "")
          echo "app_store_url=$app_store_url" >> $GITHUB_OUTPUT
          echo "Extracted App Store URL: $app_store_url"

          # Try to extract build ID - first try simple pattern, then UUID pattern
          build_id=$(grep -o "Build ID: [a-f0-9-]*" build_output.txt | cut -d' ' -f3 | head -1 || echo "")
          if [ -z "$build_id" ]; then
            # Try UUID pattern
            build_id=$(grep -oE "[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}" build_output.txt | head -1 || echo "")
          fi
          echo "build_id=$build_id" >> $GITHUB_OUTPUT
          echo "Extracted build ID: $build_id"

          # Clean up temp file
          rm -f build_output.txt

      - name: Wait for App Store Connect Processing
        if: steps.build_submit.outputs.build_id != ''
        run: |
          echo "Waiting 60 seconds for App Store Connect to process the build..."
          sleep 60

      - name: Use Alpha Users Group
        if: steps.build_submit.outputs.build_id != ''
        id: group
        run: |
          # Use the specific alpha-users group ID from GitHub secrets
          group_id="${{ secrets.TESTFLIGHT_ALPHA_GROUP_ID }}"
          echo "group_id=$group_id" >> $GITHUB_OUTPUT
          echo "Using alpha users group ID: $group_id"

      - name: Add Build to Alpha Users Group
        if: steps.build_submit.outputs.build_id != '' && steps.group.outputs.group_id != ''
        run: |
          echo "Adding build ${{ steps.build_submit.outputs.build_id }} to group ${{ steps.group.outputs.group_id }}"
          ./scripts/asc_api_add_build_to_group.sh ${{ steps.build_submit.outputs.build_id }} ${{ steps.group.outputs.group_id }}

      - name: Get Public TestFlight Link
        if: steps.group.outputs.group_id != ''
        id: testflight
        run: |
          link=$(./scripts/asc_api_get_public_link.sh ${{ steps.group.outputs.group_id }})
          echo "testflight_link=$link" >> $GITHUB_OUTPUT
          echo "TestFlight public link: $link"

      - name: Get App Version & Build Number
        id: get_version
        run: |
          version=$(jq -r '.expo.version' app.json)
          build=$(jq -r '.expo.ios.buildNumber' app.json)
          echo "version=$version" >> $GITHUB_OUTPUT
          echo "build=$build" >> $GITHUB_OUTPUT

      - name: Comment on PR with Build Info
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          message: |
            üöÄ Build uploaded to App Store Connect  
            **Version:** ${{ steps.get_version.outputs.version }}  
            **Build:** ${{ steps.get_version.outputs.build }}  

            ${{ steps.build_submit.outputs.app_store_url && format('[View on App Store Connect]({0})', steps.build_submit.outputs.app_store_url) || format('[View on App Store Connect](https://appstoreconnect.apple.com/apps/{0}/distribution)', secrets.APP_STORE_CONNECT_APP_ID) }}

            ${{ steps.testflight.outputs.testflight_link && format('üß™ [Open TestFlight]({0})', steps.testflight.outputs.testflight_link) || '‚è≥ TestFlight link will be available after processing' }}

            Check App Store Connect for processing status.

      - name: Notify Discord
        run: |
          pr_title="${{ github.event.pull_request.title }}"
          pr_body="${{ github.event.pull_request.body }}"
          version="${{ steps.get_version.outputs.version }}"
          build="${{ steps.get_version.outputs.build }}"

          # Use extracted URL or fallback to constructed URL
          if [ -n "${{ steps.build_submit.outputs.app_store_url }}" ]; then
            app_store_link="${{ steps.build_submit.outputs.app_store_url }}"
          else
            app_store_link="https://appstoreconnect.apple.com/apps/${{ secrets.APP_STORE_CONNECT_APP_ID }}/distribution"
          fi

          # Prepare TestFlight link if available
          testflight_link="${{ steps.testflight.outputs.testflight_link }}"

          if [ -n "$testflight_link" ]; then
            payload=$(jq -n               --arg title "$pr_title"               --arg body "$pr_body"               --arg ver "$version"               --arg bld "$build"               --arg asc_link "$app_store_link"               --arg tf_link "$testflight_link"               '{
                username: "CI/CD Bot",
                embeds: [
                  {
                    title: "üöÄ New build submitted to App Store Connect",
                    description: $body,
                    fields: [
                      {name: "Version", value: $ver, inline: true},
                      {name: "Build", value: $bld, inline: true},
                      {name: "App Store Connect", value: $asc_link, inline: false},
                      {name: "üß™ TestFlight (Alpha Users)", value: $tf_link, inline: false}
                    ],
                    color: 5814783
                  }
                ]
              }')
          else
            payload=$(jq -n               --arg title "$pr_title"               --arg body "$pr_body"               --arg ver "$version"               --arg bld "$build"               --arg asc_link "$app_store_link"               '{
                username: "CI/CD Bot",
                embeds: [
                  {
                    title: "üöÄ New build submitted to App Store Connect",
                    description: $body,
                    fields: [
                      {name: "Version", value: $ver, inline: true},
                      {name: "Build", value: $bld, inline: true},
                      {name: "App Store Connect", value: $asc_link, inline: false},
                      {name: "TestFlight Status", value: "‚è≥ Processing - link will be available soon", inline: false}
                    ],
                    color: 5814783
                  }
                ]
              }')
          fi

          curl -H "Content-Type: application/json"             -X POST -d "$payload" $DISCORD_WEBHOOK
